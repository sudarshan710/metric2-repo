# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
 
# jobs:
#   databricks-quality-check:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
 
#       - name: Trigger Databricks Job
#         id: run_databricks_job
#         uses: databricks/run-notebook@v0
#         with:
#           databricks-host: ${{ secrets.DATABRICKS_HOST }}
#           databricks-token: ${{ secrets.DATABRICKS_TOKEN }}
#           workspace-notebook-path: /Workspace/Users/traininguser7@sudosu.ai/dequ
#           existing-cluster-id: ${{ secrets.DATABRICKS_CLUSTER_ID }}

#       - name: Get notebook output
#         run: |
#           RUN_ID=${{ steps.run_databricks_job.outputs.run-id }}
#           OUTPUT=$(curl -s -X GET "$DATABRICKS_HOST/api/2.1/jobs/runs/get-output?run_id=$RUN_ID" \
#             -H "Authorization: Bearer $DATABRICKS_TOKEN")
#           echo "Notebook Output:"
#           echo "$OUTPUT"
 
#       - name: Download Deequ Report (if failed)
#         if: failure()
#         run: |
#           # Optionally fetch report from DBFS to attach as artifact using databricks' CLI or REST API
#           echo "Deequ failed — see DBFS report"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  databricks-quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trigger Databricks Notebook
        id: run_databricks_job
        uses: databricks/run-notebook@v0
        with:
          databricks-host: ${{ secrets.DATABRICKS_HOST }}
          databricks-token: ${{ secrets.DATABRICKS_TOKEN }}
          workspace-notebook-path: /Workspace/Users/traininguser7@sudosu.ai/dequ
          existing-cluster-id: ${{ secrets.DATABRICKS_CLUSTER_ID }}
          workspace-temp-dir: /tmp/databricks-github-actions
          git-provider: gitHub

      - name: Print success message
        if: success()
        run: echo "Deequ checks passed successfully in Databricks notebook."

      - name: Get notebook output (on success)
        if: success()
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          RUN_ID: ${{ steps.run_databricks_job.outputs.run-id }}
          TASK_KEY: notebook-task
        run: |
          if [ -z "$RUN_ID" ]; then
            echo "No RUN_ID found from notebook step."
          else
            echo "Fetching notebook output for run ID: $RUN_ID"
            RESPONSE=$(curl -s -X GET "$DATABRICKS_HOST/api/2.1/jobs/runs/get-task-output?run_id=$RUN_ID&task_key=$TASK_KEY" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN")
            echo "Notebook Output:"
            echo "$RESPONSE"


      - name: Download Deequ Report (if failed)
        if: failure()
        run: |
          echo "Deequ failed — see DBFS report or Databricks job logs for details."
